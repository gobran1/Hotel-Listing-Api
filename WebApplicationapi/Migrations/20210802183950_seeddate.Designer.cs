// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplicationapi.Data;

namespace WebApplicationapi.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20210802183950_seeddate")]
    partial class seeddate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("WebApplicationapi.Data.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Virginia",
                            ShortName = "VA"
                        },
                        new
                        {
                            Id = 2,
                            Name = "newYork",
                            ShortName = "NY"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Los Angeles",
                            ShortName = "LA"
                        });
                });

            modelBuilder.Entity("WebApplicationapi.Data.Hotel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Rate")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Hotels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "hotel address1",
                            CountryId = 1,
                            Name = "hotel name1",
                            Rate = 4.0
                        },
                        new
                        {
                            Id = 2,
                            Address = "hotel address2",
                            CountryId = 2,
                            Name = "hotel name2",
                            Rate = 4.4000000000000004
                        },
                        new
                        {
                            Id = 3,
                            Address = "hotel address3",
                            CountryId = 2,
                            Name = "hotel name3",
                            Rate = 3.5
                        });
                });

            modelBuilder.Entity("WebApplicationapi.Data.Hotel", b =>
                {
                    b.HasOne("WebApplicationapi.Data.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });
#pragma warning restore 612, 618
        }
    }
}
